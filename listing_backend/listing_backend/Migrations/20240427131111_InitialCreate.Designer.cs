// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using listing_backend.DataAccess;

#nullable disable

namespace listing_backend.Migrations
{
    [DbContext(typeof(ListingDbContext))]
    [Migration("20240427131111_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CategoryModel", b =>
                {
                    b.Property<int>("PossibleCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleModelsId")
                        .HasColumnType("int");

                    b.HasKey("PossibleCategoriesId", "PossibleModelsId");

                    b.HasIndex("PossibleModelsId");

                    b.ToTable("CategoryModel");
                });

            modelBuilder.Entity("DoorTypeModel", b =>
                {
                    b.Property<int>("PossibleDoorTypesId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleModelsId")
                        .HasColumnType("int");

                    b.HasKey("PossibleDoorTypesId", "PossibleModelsId");

                    b.HasIndex("PossibleModelsId");

                    b.ToTable("DoorTypeModel");
                });

            modelBuilder.Entity("EngineModel", b =>
                {
                    b.Property<int>("PossibleEnginesId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleModelsId")
                        .HasColumnType("int");

                    b.HasKey("PossibleEnginesId", "PossibleModelsId");

                    b.HasIndex("PossibleModelsId");

                    b.ToTable("EngineModel");
                });

            modelBuilder.Entity("ModelTraction", b =>
                {
                    b.Property<int>("PossibleModelsId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleTractionsId")
                        .HasColumnType("int");

                    b.HasKey("PossibleModelsId", "PossibleTractionsId");

                    b.HasIndex("PossibleTractionsId");

                    b.ToTable("ModelTraction");
                });

            modelBuilder.Entity("ModelTransmission", b =>
                {
                    b.Property<int>("PossibleModelsId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleTransmissionsId")
                        .HasColumnType("int");

                    b.HasKey("PossibleModelsId", "PossibleTransmissionsId");

                    b.HasIndex("PossibleTransmissionsId");

                    b.ToTable("ModelTransmission");
                });

            modelBuilder.Entity("listing_backend.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("listing_backend.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("listing_backend.Entities.DoorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DoorTypes");
                });

            modelBuilder.Entity("listing_backend.Entities.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Displacement")
                        .HasColumnType("int");

                    b.Property<string>("EngineCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("FuelId")
                        .HasColumnType("int");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("MakeId");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("listing_backend.Entities.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fuels");
                });

            modelBuilder.Entity("listing_backend.Entities.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("DoorTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("ExteriorColorId")
                        .HasColumnType("int");

                    b.Property<int>("InteriorColorId")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DoorTypeId");

                    b.HasIndex("EngineId");

                    b.HasIndex("ExteriorColorId");

                    b.HasIndex("InteriorColorId");

                    b.HasIndex("ModelId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("listing_backend.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MakeId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("listing_backend.Entities.Traction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tractions");
                });

            modelBuilder.Entity("listing_backend.Entities.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");
                });

            modelBuilder.Entity("CategoryModel", b =>
                {
                    b.HasOne("listing_backend.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("PossibleCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Model", null)
                        .WithMany()
                        .HasForeignKey("PossibleModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DoorTypeModel", b =>
                {
                    b.HasOne("listing_backend.Entities.DoorType", null)
                        .WithMany()
                        .HasForeignKey("PossibleDoorTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Model", null)
                        .WithMany()
                        .HasForeignKey("PossibleModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EngineModel", b =>
                {
                    b.HasOne("listing_backend.Entities.Engine", null)
                        .WithMany()
                        .HasForeignKey("PossibleEnginesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Model", null)
                        .WithMany()
                        .HasForeignKey("PossibleModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelTraction", b =>
                {
                    b.HasOne("listing_backend.Entities.Model", null)
                        .WithMany()
                        .HasForeignKey("PossibleModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Traction", null)
                        .WithMany()
                        .HasForeignKey("PossibleTractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModelTransmission", b =>
                {
                    b.HasOne("listing_backend.Entities.Model", null)
                        .WithMany()
                        .HasForeignKey("PossibleModelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Transmission", null)
                        .WithMany()
                        .HasForeignKey("PossibleTransmissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("listing_backend.Entities.Engine", b =>
                {
                    b.HasOne("listing_backend.Entities.Fuel", "Fuel")
                        .WithMany("PossibleEngines")
                        .HasForeignKey("FuelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fuel");

                    b.Navigation("Make");
                });

            modelBuilder.Entity("listing_backend.Entities.Listing", b =>
                {
                    b.HasOne("listing_backend.Entities.Category", "Category")
                        .WithMany("Listings")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.DoorType", "DoorType")
                        .WithMany("Listings")
                        .HasForeignKey("DoorTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Engine", "Engine")
                        .WithMany("Listings")
                        .HasForeignKey("EngineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Color", "ExteriorColor")
                        .WithMany("ListingsExterior")
                        .HasForeignKey("ExteriorColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Color", "InteriorColor")
                        .WithMany("ListingsInterior")
                        .HasForeignKey("InteriorColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Model", "Model")
                        .WithMany("Listings")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("DoorType");

                    b.Navigation("Engine");

                    b.Navigation("ExteriorColor");

                    b.Navigation("InteriorColor");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("listing_backend.Entities.Model", b =>
                {
                    b.HasOne("listing_backend.Entities.Make", "Make")
                        .WithMany()
                        .HasForeignKey("MakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Make");
                });

            modelBuilder.Entity("listing_backend.Entities.Category", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Color", b =>
                {
                    b.Navigation("ListingsExterior");

                    b.Navigation("ListingsInterior");
                });

            modelBuilder.Entity("listing_backend.Entities.DoorType", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Engine", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Fuel", b =>
                {
                    b.Navigation("PossibleEngines");
                });

            modelBuilder.Entity("listing_backend.Entities.Model", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
