// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using listing_backend.DataAccess;

#nullable disable

namespace listing_backend.Migrations
{
    [DbContext(typeof(ListingDbContext))]
    partial class ListingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("CarCategory", b =>
                {
                    b.Property<int>("PossibleCarsId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("PossibleCarsId", "PossibleCategoriesId");

                    b.HasIndex("PossibleCategoriesId");

                    b.ToTable("CarCategory");
                });

            modelBuilder.Entity("CarDoorType", b =>
                {
                    b.Property<int>("PossibleCarsId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleDoorTypesId")
                        .HasColumnType("int");

                    b.HasKey("PossibleCarsId", "PossibleDoorTypesId");

                    b.HasIndex("PossibleDoorTypesId");

                    b.ToTable("CarDoorType");
                });

            modelBuilder.Entity("CarEngine", b =>
                {
                    b.Property<int>("PossibleCarsId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleEnginesId")
                        .HasColumnType("int");

                    b.HasKey("PossibleCarsId", "PossibleEnginesId");

                    b.HasIndex("PossibleEnginesId");

                    b.ToTable("CarEngine");
                });

            modelBuilder.Entity("CarTraction", b =>
                {
                    b.Property<int>("PossibleCarsId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleTractionsId")
                        .HasColumnType("int");

                    b.HasKey("PossibleCarsId", "PossibleTractionsId");

                    b.HasIndex("PossibleTractionsId");

                    b.ToTable("CarTraction");
                });

            modelBuilder.Entity("CarTransmission", b =>
                {
                    b.Property<int>("PossibleCarsId")
                        .HasColumnType("int");

                    b.Property<int>("PossibleTransmissionsId")
                        .HasColumnType("int");

                    b.HasKey("PossibleCarsId", "PossibleTransmissionsId");

                    b.HasIndex("PossibleTransmissionsId");

                    b.ToTable("CarTransmission");
                });

            modelBuilder.Entity("FeatureListing", b =>
                {
                    b.Property<int>("FeaturesId")
                        .HasColumnType("int");

                    b.Property<int>("ListingsId")
                        .HasColumnType("int");

                    b.HasKey("FeaturesId", "ListingsId");

                    b.HasIndex("ListingsId");

                    b.ToTable("FeatureListing");
                });

            modelBuilder.Entity("listing_backend.Entities.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("EndYear")
                        .HasColumnType("int");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("StartYear")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("listing_backend.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("listing_backend.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("HexCode")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("listing_backend.Entities.DoorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DoorTypes");
                });

            modelBuilder.Entity("listing_backend.Entities.Engine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Displacement")
                        .HasColumnType("int");

                    b.Property<string>("EngineCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("FuelId")
                        .HasColumnType("int");

                    b.Property<int?>("MakeId")
                        .HasColumnType("int");

                    b.Property<int>("Power")
                        .HasColumnType("int");

                    b.Property<int>("Torque")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FuelId");

                    b.HasIndex("MakeId");

                    b.ToTable("Engines");
                });

            modelBuilder.Entity("listing_backend.Entities.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Features");
                });

            modelBuilder.Entity("listing_backend.Entities.Fuel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fuels");
                });

            modelBuilder.Entity("listing_backend.Entities.Listing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("DoorTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineId")
                        .HasColumnType("int");

                    b.Property<int>("Mileage")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("TractionId")
                        .HasColumnType("int");

                    b.Property<int?>("TransmissionId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ColorId");

                    b.HasIndex("DoorTypeId");

                    b.HasIndex("EngineId");

                    b.HasIndex("TractionId");

                    b.HasIndex("TransmissionId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.ListingImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ListingId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ListingId");

                    b.ToTable("ListingImages");
                });

            modelBuilder.Entity("listing_backend.Entities.Make", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Makes");
                });

            modelBuilder.Entity("listing_backend.Entities.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MakeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("MakeId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("listing_backend.Entities.Traction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Tractions");
                });

            modelBuilder.Entity("listing_backend.Entities.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Transmissions");
                });

            modelBuilder.Entity("CarCategory", b =>
                {
                    b.HasOne("listing_backend.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("PossibleCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Category", null)
                        .WithMany()
                        .HasForeignKey("PossibleCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarDoorType", b =>
                {
                    b.HasOne("listing_backend.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("PossibleCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.DoorType", null)
                        .WithMany()
                        .HasForeignKey("PossibleDoorTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarEngine", b =>
                {
                    b.HasOne("listing_backend.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("PossibleCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Engine", null)
                        .WithMany()
                        .HasForeignKey("PossibleEnginesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarTraction", b =>
                {
                    b.HasOne("listing_backend.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("PossibleCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Traction", null)
                        .WithMany()
                        .HasForeignKey("PossibleTractionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarTransmission", b =>
                {
                    b.HasOne("listing_backend.Entities.Car", null)
                        .WithMany()
                        .HasForeignKey("PossibleCarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Transmission", null)
                        .WithMany()
                        .HasForeignKey("PossibleTransmissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeatureListing", b =>
                {
                    b.HasOne("listing_backend.Entities.Feature", null)
                        .WithMany()
                        .HasForeignKey("FeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("listing_backend.Entities.Listing", null)
                        .WithMany()
                        .HasForeignKey("ListingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("listing_backend.Entities.Car", b =>
                {
                    b.HasOne("listing_backend.Entities.Model", "Model")
                        .WithMany("PossibleCars")
                        .HasForeignKey("ModelId");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("listing_backend.Entities.Engine", b =>
                {
                    b.HasOne("listing_backend.Entities.Fuel", "Fuel")
                        .WithMany("PossibleEngines")
                        .HasForeignKey("FuelId");

                    b.HasOne("listing_backend.Entities.Make", "Make")
                        .WithMany("PossibleEngines")
                        .HasForeignKey("MakeId");

                    b.Navigation("Fuel");

                    b.Navigation("Make");
                });

            modelBuilder.Entity("listing_backend.Entities.Listing", b =>
                {
                    b.HasOne("listing_backend.Entities.Car", "Car")
                        .WithMany("Listings")
                        .HasForeignKey("CarId");

                    b.HasOne("listing_backend.Entities.Category", "Category")
                        .WithMany("Listings")
                        .HasForeignKey("CategoryId");

                    b.HasOne("listing_backend.Entities.Color", "Color")
                        .WithMany("Listings")
                        .HasForeignKey("ColorId");

                    b.HasOne("listing_backend.Entities.DoorType", "DoorType")
                        .WithMany("Listings")
                        .HasForeignKey("DoorTypeId");

                    b.HasOne("listing_backend.Entities.Engine", "Engine")
                        .WithMany("Listings")
                        .HasForeignKey("EngineId");

                    b.HasOne("listing_backend.Entities.Traction", "Traction")
                        .WithMany("Listings")
                        .HasForeignKey("TractionId");

                    b.HasOne("listing_backend.Entities.Transmission", "Transmission")
                        .WithMany("Listings")
                        .HasForeignKey("TransmissionId");

                    b.Navigation("Car");

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("DoorType");

                    b.Navigation("Engine");

                    b.Navigation("Traction");

                    b.Navigation("Transmission");
                });

            modelBuilder.Entity("listing_backend.Entities.ListingImage", b =>
                {
                    b.HasOne("listing_backend.Entities.Listing", "Listing")
                        .WithMany("ListingImages")
                        .HasForeignKey("ListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Listing");
                });

            modelBuilder.Entity("listing_backend.Entities.Model", b =>
                {
                    b.HasOne("listing_backend.Entities.Make", "Make")
                        .WithMany("PossibleModels")
                        .HasForeignKey("MakeId");

                    b.Navigation("Make");
                });

            modelBuilder.Entity("listing_backend.Entities.Car", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Category", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Color", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.DoorType", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Engine", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Fuel", b =>
                {
                    b.Navigation("PossibleEngines");
                });

            modelBuilder.Entity("listing_backend.Entities.Listing", b =>
                {
                    b.Navigation("ListingImages");
                });

            modelBuilder.Entity("listing_backend.Entities.Make", b =>
                {
                    b.Navigation("PossibleEngines");

                    b.Navigation("PossibleModels");
                });

            modelBuilder.Entity("listing_backend.Entities.Model", b =>
                {
                    b.Navigation("PossibleCars");
                });

            modelBuilder.Entity("listing_backend.Entities.Traction", b =>
                {
                    b.Navigation("Listings");
                });

            modelBuilder.Entity("listing_backend.Entities.Transmission", b =>
                {
                    b.Navigation("Listings");
                });
#pragma warning restore 612, 618
        }
    }
}
